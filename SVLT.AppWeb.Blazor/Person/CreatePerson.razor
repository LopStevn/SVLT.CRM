@page "/create-person"

@using SVLT.DTOs.PersonDTOs;
@using SVLT.DTOs;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using SVLT.AppWeb.Blazor.Data;

@if (isSuccess == false && isError == false)
{
    <h3>Crear Nueva Persona</h3>

    <EditForm Model="person" OnValidSubmit="Create">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-4">
                <div class="form-group">
                    <label for="Name">Nombre:</label>
                    <InputText class="form-control" id="Name" @bind-Value="person.Name" />
                    <ValidationMessage For="() => person.Name" />
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="LastName">Apellido:</label>
                    <InputText class="form-control" id="LastName" @bind-Value="person.LastName" />
                    <ValidationMessage For="() => person.LastName" />
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <div class="form-group">
                        <label for="Age">Edad:</label>
                        <InputNumber class="form-control" id="Age" @bind-Value="person.Age" />
                        <ValidationMessage For="() => person.Age" />
                    </div>
                </div>
                <div class="col-4">
                    <div class="form-group">
                        <label for="Height">Estatura:</label>
                        <InputNumber class="form-control" id="Height" @bind-Value="person.Height" />
                        <ValidationMessage For="() => person.Height" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label for="Birthday">Fecha de nacimiento:</label>
                    <InputDate class="form-control" id="Birthday" @bind-Value="person.Birthdate" />
                    <ValidationMessage For="() => person.Birthdate" />
                </div>
            </div>
        </div>
        <br>
        <div class="row">
            <div class="col-12">
                <button type="submit" class="btn btn-primary">Guardar</button>
            </div>
            <br>
            <NavLink href="/customer-list" class="btn btn-secondary">Cancelar</NavLink>
        </div>

    </EditForm>
}
else if (isSuccess)
{
    person = new CreatePersonDTO();
    @*person.Birthdate = DateTime.Now.GetDateDTO();*@
    isError = false;
    <p class="alert alert-success">Persona creada con éxito.</p>
    <button type="button" @onclick="GoCreate" class="btn btn-primary">Ir a Crear</button>
    <NavLink href="/person-list" class="btn btn-primary">Ir a buscar personas</NavLink>
}
else if (isError)
{
    <p class="alert alert-success">Sucedio un error al intentar registrar</p>
    <NavLink href="/person-list" class="btn btn-primary">Aceptar</NavLink>
}


@code {
    [Inject]
    PersonService personService { get; set; }

    CreatePersonDTO person = new CreatePersonDTO();
    bool isSuccess = false;
    bool isError = false;
    //protected override void OnInitialized()
    //{
    //    person.Birthdate = DateTime.Now.GetDateDTO();

    //}
    private async Task Create()
    {
        int result = await personService.Create(person);
        if (result != 0)
            isSuccess = true;
        else
            isError = true;
    }

    private void GoCreate()
    {
        isSuccess = false;
        isError = false;
    }
}